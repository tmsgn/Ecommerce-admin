generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum MainCategory {
  MEN
  WOMEN
  KIDS
}

enum DiscountType {
  PERCENT
  VALUE
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model Store {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  description String?
  createdAt   DateTime @default(now())

  products Product[]
  orders   Order[] @relation("OrderToStore")
}

model Product {
  id            String        @id @default(cuid())
  name          String
  description   String
  price         Float
  isFeatured    Boolean       @default(false)
  discountType  DiscountType?
  discountValue Float?

  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  brandId String
  brand   Brand  @relation(fields: [brandId], references: [id])

  materialId String
  material   Material @relation(fields: [materialId], references: [id])

  variants  Variant[]
  images    Image[]
  OrderItem OrderItem[]
  createdAt DateTime    @default(now())

  mainCategories MainCategory[] 
  subcategories  Subcategory[]  @relation("ProductSubcategories")
}

model Subcategory {
  id             String         @id @default(cuid())
  name           String
  mainCategories MainCategory[] 
  products       Product[]      @relation("ProductSubcategories")
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Material {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model ShoeSize {
  id       String    @id @default(cuid())
  name     String    @unique
  variants Variant[]
}

model ShoeColor {
  id       String    @id @default(cuid())
  name     String    @unique
  variants Variant[]
}

model Variant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  stock     Int
  price     Float
  sku       String?

  sizeId  String
  size    ShoeSize  @relation(fields: [sizeId], references: [id])
  colorId String
  color   ShoeColor @relation(fields: [colorId], references: [id])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("OrderToStore",fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status OrderStatus @default(PENDING)
  paymentId String?
  paymentMethod String?
  transactionId String?
  notes String?
  total Float @default(0)
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  priceAtOrder Float?
}
